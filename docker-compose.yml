#version: '3.7'

services:
  setup:
    # The 'setup' service runs a one-off script which initializes users inside
    # Elasticsearch — such as 'logstash_internal' and 'kibana_system' — with the
    # values of the passwords defined in the '.env' file. It also creates the
    # roles required by some of these users.
    #
    # This task only needs to be performed once, during the *initial* startup of
    # the stack. Any subsequent run will reset the passwords of existing users to
    # the values defined inside the '.env' file, and the built-in roles to their
    # default permissions.
    #
    # By default, it is excluded from the services started by 'docker compose up'
    # due to the non-default profile it belongs to. To run it, either provide the
    # '--profile=setup' CLI flag to Compose commands, or "up" the service by name
    # such as 'docker compose up setup'.
    profiles:
      - setup
    build:
      context: elk-setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./elk-setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./elk-setup/lib.sh:/lib.sh:ro,Z
      - ./elk-setup/roles:/roles:ro,Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - management
    depends_on:
      - elasticsearch

  elasticsearch:
    container_name: earl-elastic
    build:
      context: elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - management
    restart: unless-stopped

  kibana:
    container_name: earl-kibana
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - management
    depends_on:
      - elasticsearch
    restart: unless-stopped

  filebeat:
    container_name: earl-filebeat
    build:
      context: filebeat/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      #- ./filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro,Z
      # - ./filebeat/config/zeek.yml:/usr/share/filebeat/modules.d/zeek.yml:ro,Z
      - zeek-logs:/zeek/logs:ro
    environment:
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - management
    depends_on:
      - elasticsearch

  zeek:
    build:
      context: zeek/
    command: ["zeek", "-C", "-i", "eth0", "local"]
    volumes:
      - zeek-logs:/zeek/logs:rw
      - ./zeek/local.zeek:/usr/local/zeek/share/zeek/site/local.zeek:ro
    networks:
      mock_internet:
        ipv4_address: 192.168.150.9
    # cap_add:
    #   - NET_ADMIN

  caldera:
    container_name: earl-caldera
    build:
      context: caldera/
      dockerfile: Dockerfile
    ports: 
      - "8888:8888"
    # Uncomment these if you want them forwarded to your localhost as well
    #   - "8443:8443"
    #   - "7010:7010"
    #   - "7011:7011/udp"
    #   - "7012:7012"
    #   - "8853:8853"
    #   - "8022:8022"
    #   - "2222:2222"
    volumes:
      - ./caldera/caldera-iot/iot:/tools/caldera/plugins/iot:rw
    command: "--insecure -l DEBUG"
    networks:
      mock_internet:
        ipv4_address: 192.168.150.10
      management:

  emux:
    image: docker.io/therealsaumil/emux:03-2023
    container_name: emux-docker  # this name MUST match the name in emux-docker-shell
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    devices:
      - /dev/net/tun
    volumes:
      - harambe:/emux/:rw
      - ./emux-extras/workspace:/home/r0/workspace
    # Uncomment these if you want them forwarded to your localhost
    ports:
      - "20080:80"
      # - "20443:443"
      # - "28080:8080"
      # - "24433:4433"
      # - "9999:9999"
      # - "2323:23"
    environment:
      # These ports are forwarded in the container (by socat) to the QEMU guest
      - "PORTFWD=20080:80,20443:443,28080:8080,24433:4433,9999:9999,2323:23"
    # Keep running
    command: ["/bin/sh", "-c", "tail -f /dev/null"]
    stop_signal: SIGTERM  # allows Ctrl-C to work for stopping the docker-compose container
    networks:
      mock_internet:
        ipv4_address: 192.168.150.20


networks:
  mock_internet:
    driver: bridge
    ipam:
     driver: default
     config:
       - subnet: 192.168.150.0/24
  management:
    driver: bridge


volumes:
  elasticsearch:
  zeek-logs:
  host-logs:
  harambe:  # this is externally built from the emux repo
    external: true
